<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chrisright</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.4;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
ammo = 3;
jumps = 0;
jumpsmax = 2;
rainbow = false;
teleportgun = false;
sniper = false;

instance_create(x,y,obj_ammo);

duck_normal = spr_player_duck;
duck_powerup = spr_player_duck_powerup;
gamepad_set_axis_deadzone(0,0.5);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rainbow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right =(gamepad_axis_value(0,gp_axislh) &gt; 0);
key_left = -(gamepad_axis_value(0,gp_axislh) &lt; 0);
key_jump = (gamepad_button_check_pressed(0,gp_face1))
key_duck = (gamepad_button_check_pressed(0,gp_shoulderlb));
key_shoot =(gamepad_button_check_pressed(0,gp_shoulderrb));
//React to inputs
move = key_left+key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_wall))
{
     jumps = jumpsmax;
}
if (key_jump) &amp;&amp; (jumps &gt; 0)
{
  jumps -=1;
  vsp = -jumpspeed;
}

//Horizontal collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
    x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
    y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//Animations
if (move!=0) image_xscale = move;
if (place_meeting(x,y+1,obj_wall))
{
if (move!=0) sprite_index = spr_player_walking; else sprite_index = spr_player_idle;
}
else

{
    if (vsp != 0)
    {
     sprite_index = spr_player_jumping; 
    
     }
}

//ducking



if (gamepad_button_check(0,gp_shoulderlb)) &amp;&amp; vsp == 0
 
{sprite_index = duck_normal;}


else if (gamepad_button_check(0,gp_shoulderlb)) &amp;&amp; vsp == 0
{sprite_index = duck_normal;}






 if vsp == 0
 {
if (gamepad_button_check_pressed(0,gp_shoulderlb)) movespeed = 0;
if (gamepad_button_check_released(0,gp_shoulderlb)) movespeed = 4;
}


//shooterino
if (key_shoot) &amp;&amp; ammo &gt; 0
{
ammo -= 1;

// duck
if (sprite_index = spr_player_duck) 
{
bullet = instance_create(x,y+7, obj_bullet);
}
// duck powerup
else if (sprite_index = spr_player_duck_powerup &amp;&amp; image_xscale = -1)
{
bullet = instance_create (x-6,y+18,obj_bullet);
}

else if (sprite_index = spr_player_duck_powerup)
{
bullet = instance_create (x+6,y+18,obj_bullet);
}

//normal shooting all directions
else if (obj_arm.direction == 0)
{
bullet = instance_create(x,y+4,obj_bullet);
}

else if (obj_arm.direction == 45 &amp;&amp; image_xscale = 1)
{
bullet = instance_create(x-2,y+1,obj_bullet); //right + up
}
else if (obj_arm.direction == 315 &amp;&amp; image_xscale = 1) 
{
bullet = instance_create(x,y+8,obj_bullet); //right+down
}
else if (obj_arm.direction == 45 &amp;&amp; image_xscale = -1)
{
bullet = instance_create(x,y+8,obj_bullet); //left + down
}
else if (obj_arm.direction == 315 &amp;&amp; image_xscale = -1)
{
bullet = instance_create(x,y-1,obj_bullet); //left + up
}
//bullets settings
bullet.direction = image_angle;
bullet.image_angle = image_angle;
bullet.speed = 15;
bullet.direction = obj_arm.direction;
bullet.image_angle = obj_arm.image_angle;


if image_xscale = -1
{bullet.speed = -15}

audio_play_sound(snd_shoot,0,0);
}

//visual ammo


if ammo = 3
{
with obj_ammo image_index = 0;
}

if ammo = 2
{
with obj_ammo image_index = 1;
}

if ammo = 1
{
with obj_ammo image_index = 2;
}

if ammo = 0
{
with obj_ammo image_index = 3;
}

if ammo &gt; 3
{
ammo = 3;
}

obj_ammo.x = x-3;
obj_ammo.y = y-40;

//wrap room
if (x &gt; room_width)
{ x = -sprite_width; }

if (x &lt; -35)
{ x = room_width; }

if (y &gt; room_height)
{ y = -sprite_height; }

if (y &lt; -sprite_height)
{ y = room_height; }



//weapons and powerups
if sniper == true
{teleportgun = false;}

if teleportgun ==  true
{sniper = false;}

if (teleportgun == true &amp;&amp; key_duck == true &amp;&amp; object_exists(obj_bullet))
{
x = obj_bullet.x;
y = obj_bullet.y;
}



if rainbow = true
{
if image_xscale = 1
{
instance_create(x-12,y-18,obj_rainbow);
}

else if image_xscale = -1
{
instance_create(x+12,y-18,obj_rainbow);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
